name: Verify Server and Dependencies

on:
  workflow_call:
    outputs:
      workflow-status:
        description: "Status of the workflow"
        value: ${{ jobs.final-validation.outputs.status }}
    inputs:
      python-version:
        description: 'Version de Python à utiliser'
        required: false
        default: '3.9'
        type: string
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  SERVER_PORT: 5001
  REQUIRED_FILES: |
    access.log
    acceuil.html
    expose_py.py
    middleware.py
    pays.html
    property.env
    reponse_meteo.html
    ville.html

jobs:
  verify-structure:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify required files
        run: |
          echo "Vérification de la présence des fichiers requis..."
          $requiredFiles = @(
            "access.log", "acceuil.html", "expose_py.py", "middleware.py", "pays.html",
            "property.env", "reponse_meteo.html", "reponse_pays.html", "requirements.txt", "ville.html"
          )
          $missingFiles = $requiredFiles | Where-Object { -not (Test-Path $_) }
          if ($missingFiles) { Write-Error "Fichiers manquants : $($missingFiles -join ', ')"; exit 1 }
          Write-Host "Tous les fichiers requis sont présents."
        shell: pwsh

      - name: Verify HTML forms and navigation
        run: |
          echo "Vérification des formulaires et boutons de navigation..."
          $htmlFiles = @('ville.html', 'pays.html', 'acceuil.html', 'reponse_meteo.html')
          $htmlPatterns = @{
            'ville.html' = @('form.*action="/submit".*method="POST"', 'href="/".*Retour')
            'pays.html' = @('form.*action="/soumettre".*method="POST"', 'href="/".*Retour')
            'acceuil.html' = @('form.*action="/submit".*method="POST"', 'href="/".*Retour')
            'reponse_meteo.html' = 'href="/".*Retour'
          }
          foreach ($file in $htmlFiles) {
            if (-not (Test-Path $file)) { Write-Error "$file est introuvable."; exit 1 }
            $content = Get-Content -Path $file -Raw
            Write-Host "Contenu de $file :"
            Write-Host $content
            foreach ($pattern in $htmlPatterns[$file]) {
              if (-not ($content -match $pattern)) {
                Write-Error "$file : Formulaire ou champ manquant (Pattern: $pattern)"
                exit 1
              }
            }
          }
        shell: pwsh

      - name: Verify response structure
        run: |
          echo "Vérification de la structure des réponses..."
          $exposeContent = Get-Content -Path expose_py.py -Raw
          $requiredFields = @('city', 'temperature', 'weather', 'humidity', 'pays', 'capital', 'population', 'languages', 'region', 'area')
          foreach ($field in $requiredFields) {
            if (-not ($exposeContent -match $field)) { Write-Error "expose_py.py : Champ '$field' manquant"; exit 1 }
          }
        shell: pwsh

  verify-server-dependencies:
    needs: verify-structure
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python and check dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install dependencies if missing
        run: |
          echo "Vérification et installation des dépendances..."
          $dependencies = @('requests', 'python-dotenv')
          foreach ($dep in $dependencies) {
            if (-not (pip list | findstr $dep)) {
                echo "Installation de $dep..."
                pip install $dep
            }
          }
          foreach ($dep in $dependencies) { if (-not (pip list | findstr $dep)) { Write-Error "Échec de l'installation de $dep"; exit 1 } }
        shell: pwsh

      - name: Create test environment file and start server
        run: |
          echo "API_KEY=test_key" > property.env
          Start-Process python -ArgumentList "expose_py.py" -NoNewWindow
          $retries = 10; $waitTime = 5; $success = $false
          for ($i = 0; $i -lt $retries; $i++) {
            try { $response = Invoke-WebRequest -Uri "http://localhost:${{ env.SERVER_PORT }}/" -ErrorAction Stop
                  if ($response.StatusCode -eq 200) { $success = $true; Write-Host "Server is ready."; break } }
            catch { Write-Host "Waiting for the server to be ready..."; Start-Sleep -Seconds $waitTime }
          }
          if (-not $success) { Write-Error "Server did not become ready in time."; exit 1 }
        shell: pwsh

      - name: Test server endpoints
        run: |
          $endpoints = @('/meteo', '/pays', '/')
          foreach ($endpoint in $endpoints) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:${{ env.SERVER_PORT }}$endpoint" -ErrorAction Stop
              if ($response.StatusCode -ne 200) { Write-Error "Endpoint $endpoint returned status code $($response.StatusCode)"; exit 1 }
              Write-Host "Endpoint $endpoint is responding correctly"
            } catch { Write-Error "Failed to reach $endpoint"; exit 1 }
          }
        shell: pwsh

  test-middleware:
    needs: verify-server-dependencies
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python and check dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies if missing
        run: |
          echo "Vérification et installation des dépendances..."
          $dependencies = @('requests', 'python-dotenv')
          foreach ($dep in $dependencies) { if (-not (pip list | findstr $dep)) { echo "Installation de $dep..."; pip install $dep } }
          foreach ($dep in $dependencies) { if (-not (pip list | findstr $dep)) { Write-Error "Échec de l'installation de $dep"; exit 1 } }
        shell: pwsh

      - name: Start server and test middleware
        run: |
          Start-Process python -ArgumentList "expose_py.py" -NoNewWindow
          Start-Sleep -Seconds 5
          $logContent = Get-Content -Path access.log
          if (-not ($logContent -match "GET /ville" -and $logContent -match "GET /pays")) {
            Write-Error "Les entrées de log attendues sont manquantes"
            exit 1
          }
        shell: pwsh

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: server-logs
          path: access.log
          retention-days: 5

  final-validation:
    needs: [verify-structure, verify-server-dependencies, test-middleware]
    runs-on: windows-latest
    outputs:
      status: ${{ steps.validation.outputs.status }}
    steps:
      - name: Final Validation
        id: validation
        run: |
          echo "Vérification finale de tous les jobs..."
          $results = @('${{ needs.verify-structure.result }}', '${{ needs.verify-server-and-dependencies.result }}', '${{ needs.test-middleware.result }}')
          foreach ($result in $results) {
            if ($result -ne 'success') { Write-Error "$result job failed"; exit 1 }
          }
          echo "status=success" >> $env:GITHUB_OUTPUT
        shell: pwsh
